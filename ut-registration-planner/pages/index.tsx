import type { NextPage } from "next"
import Head from "next/head"
import Image from "next/image"
import styles from "../styles/Home.module.css"

import React, { useState, useEffect } from "react"

import Header from "../components/Header"
import CourseCard from "../components/CourseCard"
import QuickActionsBar from "../components/QuickActionsBar"

import Collapse from "@mui/material/Collapse"
import { TransitionGroup } from "react-transition-group"

import { getStorage, setStorage } from "../utils/chromeStorage"

interface CourseDateTimeObj {
    regular: {
        days: string
        hour: string
        room: string
    }
    additional?: {
        days: string
        hour: string
        room: string
    }
}

interface Course {
    name: string
    fullName: string
    creditHours: number
    instructor: string[]
    uid: number
    status: string
    time: CourseDateTimeObj
}

// Example courseListArray
let courseListArray = [
    {
        uid: 52365,
        name: "C S 105C",
        fullName: "C S 105C COMPUTER PROGRAMMING: C++",
        creditHours: 1,
        time: {
            regular: {
                days: "W",
                hour: "10:00 a.m.-11:00 a.m.",
                room: "WAG 214",
            },
        },
        mode: "Face-to-Face",
        instructor: ["PALACIOS, JOAQUIN M"],
        status: "open; reserved",
    },
    {
        uid: 52365,
        name: "C S 105C",
        fullName: "C S 105C COMPUTER PROGRAMMING: C++",
        creditHours: 1,
        time: {
            regular: {
                days: "W",
                hour: "10:00 a.m.-11:00 a.m.",
                room: "WAG 214",
            },
        },
        mode: "Face-to-Face",
        instructor: ["PALACIOS, JOAQUIN M"],
        status: "open; reserved",
    },
    {
        uid: 52365,
        name: "C S 105C",
        fullName: "C S 105C COMPUTER PROGRAMMING: C++",
        creditHours: 1,
        time: {
            regular: {
                days: "W",
                hour: "10:00 a.m.-11:00 a.m.",
                room: "WAG 214",
            },
        },
        mode: "Face-to-Face",
        instructor: ["PALACIOS, JOAQUIN M"],
        status: "open; reserved",
    },
    {
        uid: 52365,
        name: "C S 105C",
        fullName: "C S 105C COMPUTER PROGRAMMING: C++",
        creditHours: 1,
        time: {
            regular: {
                days: "W",
                hour: "10:00 a.m.-11:00 a.m.",
                room: "WAG 214",
            },
        },
        mode: "Face-to-Face",
        instructor: ["PALACIOS, JOAQUIN M"],
        status: "open; reserved",
    },
]

const Home: NextPage = () => {
    const [userCourseList, setUserCourseList] = useState<Course[]>([])

    const removeCourse = (c_uid: Number) => {
        setUserCourseList(userCourseList.filter((c) => c.uid !== c_uid))
        // console.log("removeCourse()")
    }

    const deleteCourseList = () => {
        setUserCourseList([])
        // console.log("deleteCourseList()")
    }

    useEffect(() => {
        const getUserCourseList = async () => {
            try {
                const l_userCourseList: Course[] = await getStorage(
                    "userCourseList"
                )
                setUserCourseList(l_userCourseList)
                // console.log(userCourseList)
            } catch (error) {
                console.error(error)
            }
        }
        getUserCourseList()

        chrome.storage.onChanged.addListener((changes) => {
            // console.log(changes)
            getUserCourseList()
        })

        // When userCourseList is put in the [], it causes this component to re-render infinitely
        // console.log("useEffect, []")
    }, [])

    return (
        <div className={styles.container}>
            {/* <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head> */}

            <Header
                courseList={userCourseList}
                deleteCourseList={deleteCourseList}
            />

            <div className={styles.courseCardsContainer}>
                <TransitionGroup enter={false}>
                    {userCourseList.map((course, index) => (
                        <Collapse key={`collapse-${course.uid}-wrapper`}>
                            <CourseCard
                                key={course.uid}
                                course={course}
                                removeCourse={removeCourse}
                            />
                        </Collapse>
                    ))}
                </TransitionGroup>
            </div>

            <QuickActionsBar />
        </div>
    )
}

export default Home
